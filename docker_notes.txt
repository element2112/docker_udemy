docker notes:

- docker containers are not vms


vms:
- hardware -> host os -> hyper visor (vmware) -> Guest OS -> bins/libs -> application

docker:
- hardware -> host os -> docker daemon -> (bins/libs) -> application

- docker is kind of a package manager for entire applications (kind of)


https://www.tenforums.com/tutorials/164301-how-update-wsl-wsl-2-windows-10-a.html

https://docs.docker.com/engine/install/ubuntu/

- images do not change state. Are built once unless there are changes

- containers == running image
	- OOP example
		- image -> class
		- container -> instance of class
		
- containers are immutable
	- for ex: 
		- running ubuntu image, create a file, exit container
		- run image again, file no longer exists. Therefore container is not changed

- in casual convo docker image and docker repository used interchangably
	- a docker repo consists of multiple images with the same name
		- different versions
		
- docker hub like github for docker images
	- can have personal private or public docker images

- only use images apart of the official repositories managed by docker


BUILDING DOCKER IMAGES

two ways:
	- run docker container -> make changes -> docker commit (saves to new image layer) [wont use this in real world]
	
	- docker file (recipe for creating docker image)
		(think package.json for npm)


CREATE DOCKER file

	- all docker files start with FROM
	- FROM baseimage (use an official base image if possible)
		- FROM scratch ... (an image with no base os)
	

